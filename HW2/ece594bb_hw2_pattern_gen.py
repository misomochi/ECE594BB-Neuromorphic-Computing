# -*- coding: utf-8 -*-
"""ECE594BB_HW2_pattern_gen.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f2K6hmkFVJIIgeuf47bOYHLjRSwP-6AI
"""

# parse sequence from pattern files
s = [[] for i in range(4)]

for i in range(4):
    for line in open(f'in{i + 1}.txt', 'r'):
        if not line.startswith('//'):
            s[i].append(line)

# convert strings to arrays of binaries
for i in range(4):
    print(f'{i + 1}-th pre-synaptic firing sequences')
    for j in range(3):
        s[i][j] = [int(b) for b in s[i][j] if b != '\n']
        print(f'{j + 1}-th neuron: {s[i][j]}')

import numpy as np

V_rest = 6
V_leak = 1
w = [1, 2, 3]
K_syn = 1
V_th = 14

n_steps = len(s[0][0])

# membrane potential
V = np.zeros((4, n_steps), dtype=int)
V[:, 0] = V_rest

# spike train
spikes = np.zeros((4, n_steps), dtype=int)

for i in range(4):
    for t in range(1, n_steps):
        if V[i, t - 1] >= V_th:
            V[i, t] = V_rest
            spikes[i, t - 1] = 1
        else:
            V[i, t] = V[i, t - 1] + K_syn * np.dot(w, [s[i][0][t - 1], s[i][1][t - 1], s[i][2][t - 1]]) - (V_leak if V[i, t - 1] > V_rest else 0)
    
    print(f'{i + 1}-th V(t) and spike train')
    for j in range(3):
        print(f'{j + 1}-th neuron: {s[i][j]}')
    print(list(V[i]))
    print(list(spikes[i]))

for i in range(4):
    f = open(f'out{i + 1}_golden.txt', 'w')
    for n in spikes[i]:
        f.write(str(n) + '\n')
    f.close()