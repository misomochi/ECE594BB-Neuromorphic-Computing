# -*- coding: utf-8 -*-
"""ECE594BB_HW3_pattern.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1agaEtMX8k0SvUOxfuybNs_a54m15fUr6
"""

# parse sequence from pattern files
s = [[] for i in range(4)]

for i in range(4):
    for line in open(f'in{i + 1}.txt', 'r'):
        if not line.startswith('//'):
            s[i].append(line)

# convert strings to arrays of binaries
for i in range(4):
    print(f'{i + 1}-th pre-synaptic firing sequences')
    for j in range(3):
        s[i][j] = [int(b) for b in s[i][j] if b != '\n']
        print(f'{j + 1}-th neuron: {s[i][j]}')

import numpy as np

neurons = 5

V_rest = 6
V_leak = 1
K_syn = 1
V_th = 14

# weight parameters
w = np.zeros((8, 8))
w[0:3, 3:6] = [[3, 1, 4],
               [3, 2, 3],
               [2, 3, 4]]
w[3:6, 6:8] = [[3, 2],
               [2, 4],
               [3, 2]]

n_steps = len(s[0][0])

# membrane potential
V = np.zeros((4, neurons, n_steps), dtype=int)
V[:, :, 0] = V_rest

# spike train
spikes = np.zeros((4, neurons, n_steps), dtype=int)

for i in range(4):
    for t in range(1, n_steps):
        for j in range(neurons):
            if V[i, j, t - 1] >= V_th:
                V[i, j, t] = V_rest
                spikes[i, j, t - 1] = 1
            else:
                if j < 3:
                    V[i, j, t] = V[i, j, t - 1] + K_syn * np.dot(w[0:3, j + 3], [s[i][0][t - 1], s[i][1][t - 1], s[i][2][t - 1]]) - (V_leak if V[i, j, t - 1] > V_rest else 0)
                else:
                    V[i, j, t] = V[i, j, t - 1] + K_syn * np.dot(w[3:6, j + 3], spikes[i, 0:3, t - 1]) - (V_leak if V[i, j, t - 1] > V_rest else 0)
    
    print(f'{i + 1}-th V(t) and spike train')
    for k in range(3):
        print(f'{k + 1}-th neuron: {s[i][k]}')
        
    for k in range(neurons):
        print(f'{k + 4}-th neuron V(t) = {list(V[i, k])}')
        print(f'{k + 4}-th neuron S(t) = {list(spikes[i, k])}')

for i in range(4):
    f = open(f'out{i + 1}_golden.txt', 'w')
    for j in range(len(spikes[i])):
        for n in spikes[i, j]:
            f.write(str(n))
        f.write('\n')
    f.close()